@page "/"
@inject IJSRuntime JSRuntime;
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<h1>File drag and drop & paste</h1>

<div @ref="fileDropContainer" class="file-drop-zone @HoverClass"
     @ondragenter="OnDragEnter"
     @ondragleave="OnDragLeave" @ondragover="OnDragEnter">
    <InputFile @ref="inputFile" multiple OnChange="@OnChange" />
</div>

<div class="image-container">
    @foreach (var imageSource in imageSources)
    {
        <img src="@imageSource" />
    }
</div>

@code {

    private const int maxAllowedSize = 2 * 1024 * 1024; // 2 MB
    private List<string> imageSources = new List<string>();
    private string HoverClass = string.Empty;
    private ElementReference fileDropContainer;
    InputFile? inputFile;

    IJSObjectReference? _filePasteModule;
    IJSObjectReference? _filePasteFunctionReference;

    void OnDragEnter(DragEventArgs e) => HoverClass = "hover";
    void OnDragLeave(DragEventArgs e) => HoverClass = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _filePasteModule = await JSRuntime
                .InvokeAsync<IJSObjectReference>("import", "./js/filePaste.js");

            _filePasteFunctionReference = await _filePasteModule
            .InvokeAsync<IJSObjectReference>("initializeFilePaste", fileDropContainer, inputFile!.Element);
        }
    }

    async Task OnChange(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            using var stream = file.OpenReadStream(maxAllowedSize);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            imageSources.Add($"data:{file.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_filePasteFunctionReference is not null)
        {
            await _filePasteFunctionReference.InvokeVoidAsync("dispose");
            await _filePasteFunctionReference.DisposeAsync();
        }

        if (_filePasteModule is not null)
        {
            await _filePasteModule.DisposeAsync();
        }
    }
}